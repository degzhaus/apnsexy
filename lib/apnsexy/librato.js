// Generated by CoffeeScript 1.4.0
(function() {
  var Librato, Metrics, key, value, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ref = require('./common');
  for (key in _ref) {
    value = _ref[key];
    eval("var " + key + " = value;");
  }

  Metrics = require('librato-metrics');

  module.exports = Librato = (function(_super) {

    __extends(Librato, _super);

    function Librato(options) {
      this.finish = __bind(this.finish, this);

      var _this = this;
      this.metrics = Metrics.createClient(options);
      this.resetVars();
      setInterval(function() {
        if ((_this.drops + _this.errors + _this.feedback + _this.sent + _this.successes) === 0) {
          _this.emit('finish');
          return;
        }
        _this.gauges({
          errors: {
            value: _this.errors
          },
          feedback: {
            value: _this.feedback
          },
          total_sent: {
            value: _this.sent
          }
        }).fail(function(e) {
          throw e;
        }).fin(function() {
          return _this.resetVars();
        });
        return _this.resetVars();
      }, 10 * 1000);
    }

    Librato.prototype.bindApnsexy = function(instance) {
      var _this = this;
      instance.on('finish', this.finish);
      instance.on('error', function() {
        return _this.errors++;
      });
      return instance.on('sent', function() {
        return _this.sent++;
      });
    };

    Librato.prototype.bindFeedback = function(instance) {
      var _this = this;
      return instance.on('feedback', function() {
        return _this.feedback++;
      });
    };

    Librato.prototype.counters = function(counters) {
      return this.post({
        counters: counters
      });
    };

    Librato.prototype.finish = function(counts) {
      var _this = this;
      this.drops = counts.potential_drops;
      this.successes = counts.total_sent;
      return this.gauges({
        drop_pct: {
          value: this.drops / counts.total_notifications
        },
        error_pct: {
          value: counts.total_errors / counts.total_notifications
        },
        potential_drops: {
          value: this.drops
        },
        successes: {
          value: this.successes
        }
      }).fail(function(e) {
        throw e;
      });
    };

    Librato.prototype.gauges = function(gauges) {
      return this.post({
        gauges: gauges
      });
    };

    Librato.prototype.post = function(data) {
      var _this = this;
      return defer(function(resolve, reject) {
        return _this.metrics.post('/metrics', data, function(err, response) {
          if (err) {
            return reject(err);
          } else {
            return resolve(response);
          }
        });
      });
    };

    Librato.prototype.resetVars = function() {
      this.drops = 0;
      this.errors = 0;
      this.feedback = 0;
      this.sent = 0;
      return this.successes = 0;
    };

    return Librato;

  })(EventEmitter);

}).call(this);
