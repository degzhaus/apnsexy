// Generated by CoffeeScript 1.4.0
(function() {
  var Apnshit, key, value, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ref = require('./apnshit/common');
  for (key in _ref) {
    value = _ref[key];
    eval("var " + key + " = value;");
  }

  module.exports = Apnshit = (function(_super) {

    __extends(Apnshit, _super);

    function Apnshit(options) {
      this.finished = __bind(this.finished, this);
      this.current_id = 0;
      this.Notification = require('./apnshit/notification');
      this.not_sure_if_sent = [];
      this.on("error", function() {});
      this.options = {
        cert: 'cert.pem',
        key: 'key.pem',
        ca: null,
        passphrase: null,
        gateway: 'gateway.push.apple.com',
        port: 2195,
        rejectUnauthorized: true,
        enhanced: true,
        errorCallback: void 0,
        cacheLength: 100,
        autoAdjustCache: true,
        connectionTimeout: 0
      };
      _.extend(this.options, options);
    }

    Apnshit.prototype.finished = function() {
      var _this = this;
      this.finished || (this.finished = 0);
      return setTimeout(function() {
        _this.finished += 1;
        if (_this.finished >= 5 || !_this.socket.bufferSize) {
          _this.disconnect();
          _this.finished = 0;
          return _this.emit('done');
        } else {
          return _this.checkIfDone();
        }
      }, 5000);
    };

    Apnshit.prototype.connect = function() {
      var _this = this;
      if (this.connecting) {
        return this.connect_promise;
      } else {
        return this.connect_promise = this.defer(function(resolve, reject) {
          var socket_options;
          if (_this.socket && _this.socket.writable) {
            console.log("no need to reconnect!");
            return resolve();
          } else {
            console.log("reconnect!");
            _this.connecting = true;
            socket_options = {
              ca: _this.options.ca,
              cert: fs.readFileSync(_this.options.cert),
              key: fs.readFileSync(_this.options.key),
              passphrase: _this.options.passphrase,
              rejectUnauthorized: _this.options.rejectUnauthorized,
              socket: new net.Stream()
            };
            _this.socket = tls.connect(_this.options.port, _this.options.gateway, socket_options, function() {
              resolve();
              _this.connecting = false;
              return _this.emit("connect");
            });
            _this.socket.setNoDelay(false);
            _this.socket.setTimeout(_this.options.connectionTimeout);
            _this.socket.on("error", function() {
              return _this.socketError;
            });
            _this.socket.on("timeout", function() {
              return _this.socketTimeout;
            });
            _this.socket.on("data", function(data) {
              return _this.socketData(data);
            });
            _this.socket.on("drain", function() {
              return _this.socketDrain;
            });
            _this.socket.on("clientError", function() {
              return _this.socketClientError;
            });
            _this.socket.on("close", function() {
              return _this.socketClose;
            });
            _this.socket.setTimeout(5000, _this.finished);
            return _this.socket.socket.connect(_this.options.port, _this.options.gateway);
          }
        });
      }
    };

    Apnshit.prototype.defer = function(fn) {
      var d;
      d = Q.defer();
      fn(d.resolve, d.reject);
      return d.promise;
    };

    Apnshit.prototype.disconnect = function() {
      this.socket.destroy();
      return delete this.socket;
    };

    Apnshit.prototype.send = function(notification) {
      var data, encoding, message, message_length, position, token,
        _this = this;
      data = void 0;
      encoding = notification.encoding || "utf8";
      message = JSON.stringify(notification);
      message_length = Buffer.byteLength(message, encoding);
      position = 0;
      token = new Buffer(notification.device.replace(/\s/g, ""), "hex");
      return this.connect().then(function() {
        notification._uid = _this.current_id++;
        if (_this.current_id > 0xffffffff) {
          _this.current_id = 0;
        }
        if (_this.options.enhanced) {
          data = new Buffer(1 + 4 + 4 + 2 + token.length + 2 + message_length);
          data[position] = 1;
          position++;
          data.writeUInt32BE(notification._uid, position);
          position += 4;
          data.writeUInt32BE(notification.expiry, position);
          position += 4;
        } else {
          data = new Buffer(1 + 2 + token.length + 2 + message_length);
          data[position] = 0;
          position++;
        }
        data.writeUInt16BE(token.length, position);
        position += 2;
        position += token.copy(data, position, 0);
        data.writeUInt16BE(message_length, position);
        position += 2;
        position += data.write(message, position, encoding);
        _this.not_sure_if_sent.push(notification);
        return _this.defer(function(resolve, reject) {
          console.log("write: ", notification.alert);
          return _this.socket.write(data, encoding, function() {
            return resolve(notification);
          });
        });
      });
    };

    Apnshit.prototype.socketData = function(data) {
      var error_code, identifier, item, notification, resend, _i, _len, _results,
        _this = this;
      if (data[0] === 8) {
        error_code = data[1];
        identifier = data.readUInt32BE(2);
        notification = _.find(this.not_sure_if_sent, function(item, i) {
          return item._uid === identifier;
        });
        if (notification) {
          console.log("failed: ", notification.alert);
          console.log("@not_sure_if_sent: ", this.inspect(this.not_sure_if_sent));
          this.emit('error', notification);
          resend = this.not_sure_if_sent.slice(this.not_sure_if_sent.indexOf(notification) + 1);
          this.not_sure_if_sent = [];
          this.disconnect();
          _results = [];
          for (_i = 0, _len = resend.length; _i < _len; _i++) {
            item = resend[_i];
            console.log("resend: ", item.alert);
            _results.push(this.send(item));
          }
          return _results;
        }
      }
    };

    Apnshit.prototype.inspect = function(arr) {
      var output;
      output = _.map(arr, function(item) {
        return item.alert;
      });
      return "[ " + (output.join(',')) + " ]";
    };

    Apnshit.prototype.socketDrain = function() {
      return console.log('socket drain');
    };

    Apnshit.prototype.socketError = function() {
      console.log('socket error');
      return delete this.socket;
    };

    Apnshit.prototype.socketClientError = function() {
      console.log('socket client error');
      return delete this.socket;
    };

    Apnshit.prototype.socketClose = function() {
      console.log('socket close');
      return delete this.socket;
    };

    Apnshit.prototype.socketTimeout = function() {
      console.log('socket timeout');
      return delete this.socket;
    };

    return Apnshit;

  })(EventEmitter);

}).call(this);
