// Generated by CoffeeScript 1.4.0
(function() {
  var Debug, key, value, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  _ref = require('./common');
  for (key in _ref) {
    value = _ref[key];
    eval("var " + key + " = value;");
  }

  module.exports = Debug = (function(_super) {

    __extends(Debug, _super);

    function Debug(instance) {
      this.debug = __bind(this.debug, this);
      this.events = [];
      this.instance = instance;
      this.instance.debug = this.debug;
      this.instance.debug_events = this.events;
    }

    Debug.prototype.debug = function() {
      var e, params,
        _this = this;
      e = arguments[0], params = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (!(this.events.indexOf(e) > -1)) {
        this.events.push(e);
      }
      if (this.instance.options.debug_ignore.indexOf(e) > -1) {
        return;
      }
      if (params instanceof Array) {
        params = _.map(params, function(param) {
          return _this.extractInfo(param);
        });
        params.unshift(e);
        params = _.compact(params);
      } else {
        _.each(params, function(value, key) {
          return params[key] = _this.extractInfo(value);
        });
        params = [e, params];
      }
      this.instance.emit.apply(this.instance, params);
      params.unshift('debug');
      return this.instance.emit.apply(this.instance, params);
    };

    Debug.prototype.extractInfo = function(param) {
      if (param == null) {
        return;
      }
      if (param.alert) {
        return {
          alert: param.alert,
          device: param.device,
          uid: param._uid
        };
      } else if (param instanceof Error) {
        return param;
      } else if (typeof param === 'number') {
        return param + '';
      }
    };

    return Debug;

  })(EventEmitter);

}).call(this);
