// Generated by CoffeeScript 1.4.0
(function() {
  var Librato, Metrics, key, value, _ref,
    __slice = [].slice;

  _ref = require('./common');
  for (key in _ref) {
    value = _ref[key];
    eval("var " + key + " = value;");
  }

  Metrics = require('librato-metrics');

  module.exports = Librato = (function() {

    function Librato(instance) {
      var _this = this;
      this.metrics = Metrics.createClient(instance.options.librato);
      this.errors = 0;
      instance.on('finish', function(alerts_sent, potential_drops) {
        var drop_pct, error_pct;
        drop_pct = potential_drops / alerts_sent;
        error_pct = _this.errors / alerts_sent;
        return _this.post({
          gauges: {
            alerts_sent: {
              value: alerts_sent
            },
            drop_pct: {
              value: drop_pct
            },
            error_pct: {
              value: error_pct
            },
            errors: {
              value: _this.errors
            },
            potential_drops: {
              value: potential_drops
            }
          },
          counters: {
            total_alerts_sent: {
              value: alerts_sent
            }
          }
        }).fail(function(e) {
          throw e;
        }).fin(function() {
          return _this.errors = 0;
        });
      });
      instance.on('error', function() {
        return _this.errors++;
      });
    }

    Librato.prototype.counters = function() {
      var counters;
      counters = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.post({
        counters: counters
      });
    };

    Librato.prototype.gauges = function() {
      var gauges;
      gauges = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.post({
        gauges: gauges
      });
    };

    Librato.prototype.post = function(data) {
      var _this = this;
      return defer(function(resolve, reject) {
        return _this.metrics.post('/metrics', data, function(err, response) {
          if (err) {
            return reject(err);
          } else {
            return resolve(response);
          }
        });
      });
    };

    return Librato;

  })();

}).call(this);
